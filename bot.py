import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
import asyncpg
from datetime import datetime

API_TOKEN = "7196045219:AAFfbeIZQXKAb_cgAC2cnbdMY__L0Iakcrg"
DATABASE_URL = "postgresql://postgres:CHLLglOdBiZEuGZUcfyhYwfTDoxhklIe@yamanote.proxy.rlwy.net:53203/railway"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def create_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

db_pool = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
async def init_db():
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                quantity INT NOT NULL,
                price NUMERIC(10,2) NOT NULL
            );
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS sales (
                id SERIAL PRIMARY KEY,
                product_id INT REFERENCES products(id),
                quantity INT NOT NULL,
                price NUMERIC(10,2) NOT NULL,
                total NUMERIC(10,2) NOT NULL,
                client_name TEXT,
                client_phone TEXT,
                payment_method TEXT,
                sale_date TIMESTAMP NOT NULL
            );
        """)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
    InlineKeyboardButton("üõí –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="sell_product"),
    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
)

payment_kb = InlineKeyboardMarkup(row_width=3).add(
    InlineKeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash"),
    InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card"),
    InlineKeyboardButton("üìÖ –í –¥–æ–ª–≥", callback_data="pay_debt"),
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–≤ –∏–¥–µ–∞–ª–µ FSM)
users_cart = {}

@dp.message(commands=["start"])
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ CRM –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.callback_query()
async def callbacks_handler(query: CallbackQuery):
    user_id = query.from_user.id
    data = query.data

    if data == "add_product":
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ú–æ–ª–æ–∫–æ, 10, 5000")
        await query.answer()

        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        users_cart[user_id] = {"state": "adding_product"}

    elif data == "sell_product":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        async with db_pool.acquire() as conn:
            products = await conn.fetch("SELECT id, name, quantity, price FROM products WHERE quantity > 0")
        if not products:
            await query.message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            await query.answer()
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for p in products:
            kb.insert(InlineKeyboardButton(f"{p['name']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {p['quantity']}, —Ü–µ–Ω–∞: {p['price']})", callback_data=f"sell_{p['id']}"))
        await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=kb)
        await query.answer()

    elif data.startswith("sell_"):
        product_id = int(data.split("_")[1])
        users_cart[user_id] = {"state": "selling_product", "product_id": product_id}
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        await query.answer()

    elif data in ("pay_cash", "pay_card", "pay_debt"):
        if user_id not in users_cart or users_cart[user_id].get("state") != "waiting_payment":
            await query.answer("–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–¥–∞–∂–∏.")
            return

        payment_method = {"pay_cash": "–ù–∞–ª–∏—á–Ω—ã–µ", "pay_card": "–ö–∞—Ä—Ç–∞", "pay_debt": "–í –¥–æ–ª–≥"}[data]
        sale_info = users_cart[user_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ –ë–î
        async with db_pool.acquire() as conn:
            product = await conn.fetchrow("SELECT * FROM products WHERE id=$1", sale_info["product_id"])

            total = sale_info["quantity"] * sale_info["price"]

            await conn.execute("""
                INSERT INTO sales(product_id, quantity, price, total, client_name, client_phone, payment_method, sale_date)
                VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
            """, sale_info["product_id"], sale_info["quantity"], sale_info["price"], total,
                 sale_info.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                 sale_info.get("client_phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                 payment_method,
                 datetime.now())

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            new_qty = product["quantity"] - sale_info["quantity"]
            await conn.execute("UPDATE products SET quantity=$1 WHERE id=$2", new_qty, sale_info["product_id"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫
        receipt = f"""üßæ –ß–µ–∫
–î–∞—Ç–∞: {datetime.now().strftime("%d-%m-%Y %H:%M")}

–¢–æ–≤–∞—Ä: {product['name']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sale_info['quantity']}
–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {sale_info['price']}
–ò—Ç–æ–≥: {total}

–ö–ª–∏–µ–Ω—Ç: {sale_info.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
–¢–µ–ª–µ—Ñ–æ–Ω: {sale_info.get("client_phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}
"""

        await query.message.answer(receipt)
        await query.answer("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")

        # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        users_cart.pop(user_id, None)

    elif data == "stats":
        async with db_pool.acquire() as conn:
            result = await conn.fetchrow("SELECT SUM(total) as total_income FROM sales")
        total_income = result["total_income"] or 0
        await query.message.answer(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income} —Å—É–º")
        await query.answer()

@dp.message()
async def message_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in users_cart:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏", reply_markup=main_kb)
        return

    state = users_cart[user_id].get("state")

    if state == "adding_product":
        try:
            name, qty, price = [x.strip() for x in message.text.split(",")]
            qty = int(qty)
            price = float(price)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n–ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞")
            return

        async with db_pool.acquire() as conn:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            existing = await conn.fetchrow("SELECT id FROM products WHERE name=$1", name)
            if existing:
                await conn.execute("UPDATE products SET quantity=quantity+$1, price=$2 WHERE id=$3", qty, price, existing["id"])
            else:
                await conn.execute("INSERT INTO products(name, quantity, price) VALUES ($1,$2,$3)", name, qty, price)

        users_cart.pop(user_id)
        await message.answer(f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.", reply_markup=main_kb)

    elif state == "selling_product":
        try:
            quantity = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
            return

        users_cart[user_id]["quantity"] = quantity
        users_cart[user_id]["state"] = "enter_price"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —à—Ç—É–∫—É:")

    elif state == "enter_price":
        try:
            price = float(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
            return

        users_cart[user_id]["price"] = price
        users_cart[user_id]["state"] = "enter_client_name"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")

    elif state == "enter_client_name":
        users_cart[user_id]["client_name"] = message.text.strip()
        users_cart[user_id]["state"] = "enter_client_phone"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")

    elif state == "enter_client_phone":
        users_cart[user_id]["client_phone"] = message.text.strip()
        users_cart[user_id]["state"] = "waiting_payment"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb)

    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏", reply_markup=main_kb)


async def main():
    global db_pool
    db_pool = await create_db_pool()
    await init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –±–æ—Ç –≥–æ—Ç–æ–≤—ã!")

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
