#!/usr/bin/env python3
# bot.py

import os
import asyncio
from decimal import Decimal
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

import asyncpg
from aiogram.filters import Text
from aiogram.filters.state import StateFilter
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN or not DATABASE_URL:
    raise RuntimeError("TELEGRAM_TOKEN and DATABASE_URL must be set in environment variables")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- DB helpers ---
async def init_db_pool():
    pool = await asyncpg.create_pool(DATABASE_URL)
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            name TEXT UNIQUE NOT NULL,
            quantity INT NOT NULL,
            price NUMERIC(10,2) NOT NULL
        );
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS sales (
            id SERIAL PRIMARY KEY,
            product_id INT REFERENCES products(id),
            quantity INT NOT NULL,
            price NUMERIC(10,2) NOT NULL,
            total NUMERIC(10,2) NOT NULL,
            client_name TEXT,
            client_phone TEXT,
            payment_method TEXT,
            sale_date TIMESTAMP NOT NULL
        );
        """)
    return pool

db_pool: asyncpg.pool.Pool | None = None

# --- FSM states ---
class AddProductStates(StatesGroup):
    waiting_for_input = State()

class SellStates(StatesGroup):
    waiting_for_product = State()
    waiting_for_quantity = State()
    waiting_for_client_name = State()
    waiting_for_client_phone = State()
    waiting_for_payment = State()
    confirm = State()

# --- Keyboards ---
def main_menu_kb():
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üõí –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    ], resize_keyboard=True)
    return kb

def payment_kb():
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ"), KeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞")],
        [KeyboardButton(text="üìÖ –í –¥–æ–ª–≥")],
    ], resize_keyboard=True, one_time_keyboard=True)
    return kb

# --- Handlers ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π CRM-–±–æ—Ç.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚Äî –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (—Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,—Ü–µ–Ω–∞) –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É\n"
        "üõí –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π –¥–æ—Ö–æ–¥\n\n"
        "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ:\n"
        "`–Ø–±–ª–æ–∫–æ, 10, 1.50`"
    )
    await message.answer(text, reply_markup=main_menu_kb(), parse_mode="Markdown")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
@dp.message(Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"))
async def start_add(message: types.Message, state: FSMContext):
    await state.set_state(AddProductStates.waiting_for_input)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º—ã —Å–ø—Ä–æ—Å–∏–º –¥–∞–ª—å—à–µ.",
        parse_mode="Markdown"
    )

@dp.message(AddProductStates.waiting_for_input)
async def process_add_input(message: types.Message, state: FSMContext):
    text = message.text.strip()
    parts = [p.strip() for p in text.split(",")]
    try:
        if len(parts) == 3:
            name = parts[0]
            qty = int(parts[1])
            price = Decimal(parts[2])
        else:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ü–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ø–±–ª–æ–∫–æ, 10, 1.50)."
            )
            return
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT id FROM products WHERE name=$1", name)
        if product:
            await conn.execute(
                "UPDATE products SET quantity=quantity+$1, price=$2 WHERE id=$3",
                qty, price, product['id']
            )
            await message.answer(f"–û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä: {name} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ {qty} —à—Ç., —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {price}")
        else:
            await conn.execute(
                "INSERT INTO products(name, quantity, price) VALUES($1, $2, $3)",
                name, qty, price
            )
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}, —Ü–µ–Ω–∞: {price}")
    await state.clear()

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def show_stats(message: types.Message):
    async with db_pool.acquire() as conn:
        total = await conn.fetchval("SELECT COALESCE(SUM(total), 0) FROM sales")
    await message.answer(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total} —É.–µ.")

# --- –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ ---
@dp.message(Text("üõí –ü—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"))
async def start_sell(message: types.Message, state: FSMContext):
    await state.set_state(SellStates.waiting_for_product)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...")

@dp.message(StateFilter(SellStates.waiting_for_product))
async def autocomplete_product_name(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞.")
        return
    async with db_pool.acquire() as conn:
        products = await conn.fetch(
            "SELECT name FROM products WHERE name ILIKE $1 ORDER BY name LIMIT 10", f"{text}%"
        )
    if not products:
        await message.answer("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    buttons = [
        InlineKeyboardButton(text=product['name'], callback_data=f"select_product:{product['name']}")
        for product in products
    ]
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(*buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)

@dp.callback_query(lambda c: c.data and c.data.startswith("select_product:"))
async def process_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    product_name = callback_query.data[len("select_product:"):]
    async with db_pool.acquire() as conn:
        product = await conn.fetchrow("SELECT * FROM products WHERE name = $1", product_name)
    if not product:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await state.update_data(product=product)
    await state.set_state(SellStates.waiting_for_quantity)
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_name}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–¥–æ—Å—Ç—É–ø–Ω–æ: {product['quantity']})")
    await callback_query.answer()

@dp.message(SellStates.waiting_for_quantity)
async def process_sell_quantity(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product = data['product']
    try:
        qty = int(message.text.strip())
        if qty <= 0:
            raise ValueError()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return
    if qty > product['quantity']:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞. –í –Ω–∞–ª–∏—á–∏–∏ {product['quantity']} —à—Ç.")
        return
    await state.update_data(quantity=qty)
    await state.set_state(SellStates.waiting_for_client_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞")

@dp.message(SellStates.waiting_for_client_name)
async def process_client_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(client_name=name)
    await state.set_state(SellStates.waiting_for_client_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞")

@dp.message(SellStates.waiting_for_client_phone)
async def process_client_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not phone:
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(client_phone=phone)
    await state.set_state(SellStates.waiting_for_payment)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())

@dp.message(SellStates.waiting_for_payment)
async def process_payment(message: types.Message, state: FSMContext):
    payment = message.text.strip()
    if payment not in ["üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üí≥ –ö–∞—Ä—Ç–∞", "üìÖ –í –¥–æ–ª–≥"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return
    await state.update_data(payment_method=payment)
    data = await state.get_data()
    product = data['product']
    quantity = data['quantity']
    total = quantity * float(product['price'])
    await state.update_data(total=total)

    confirm_text = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–æ–¥–∞–∂—É?\n\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['client_phone']}\n"
        f"–û–ø–ª–∞—Ç–∞: {payment}\n"
        f"–ò—Ç–æ–≥: {total:.2f} —É.–µ."
    )

    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True, one_time_keyboard=True)

    await state.set_state(SellStates.confirm)
    await message.answer(confirm_text, reply_markup=kb)

@dp.message(SellStates.confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        product = data['product']
        quantity = data['quantity']
        client_name = data['client_name']
        client_phone = data['client_phone']
        payment_method = data['payment_method']
        total = data['total']
        sale_date = datetime.now()

        async with db_pool.acquire() as conn:
            current_product = await conn.fetchrow("SELECT * FROM products WHERE id=$1", product['id'])
            if current_product['quantity'] < quantity:
                await message.answer(f"–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {current_product['quantity']}, –º–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                await state.clear()
                await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_kb())
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥
            await conn.execute(
                "UPDATE products SET quantity=quantity-$1 WHERE id=$2",
                quantity, product['id']
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ
            await conn.execute(
                "INSERT INTO sales(product_id, quantity, price, total, client_name, client_phone, payment_method, sale_date) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)",
                product['id'], quantity, product['price'], total, client_name, client_phone, payment_method, sale_date
            )

        await message.answer("–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!", reply_markup=main_menu_kb())
        await state.clear()
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu_kb())
        await state.clear()
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    global db_pool
    db_pool = await init_db_pool()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
